

# ===============================
# = Security
# ===============================

security.sessions=NEVER
server.session.timeout=600
#security.basic.enabled=false
# ===============================
# = Logging level
# ===============================


logging.level.org.hibernate=ERROR
logging.level.com.letstagon=ERROR


# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
#spring.datasource.url = jdbc:mysql://localhost:3306/lto
spring.datasource.url = jdbc:mysql://lto.cd8izrkbhxxy.us-west-2.rds.amazonaws.com:3306/lto

# Username and password
spring.datasource.username = root
spring.datasource.password = rootroot

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = false

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.EJB3NamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# =================================
# =  MVC
# =================================
#spring.mvc.view.suffix=.html


letsTagon.appUrl=http://letstagon-env-1.szvpn56kc7.us-west-2.elasticbeanstalk.com
#letsTagon.appUrl=http://localhost:8080




# =================================
# =  Oauth Linkedin
# =================================


security.oauth2.client.grant-type=authorization_code
security.oauth2.client.client-id=81a0o1zczf4qb4
security.oauth2.client.client-secret=VTjJ0FSrDRlkVLAD
security.oauth2.client.pre-established-redirect-uri=/linkedin/auth
security.oauth2.client.professional-redirect-uri=/linkedin/importProfessionalDetails
security.oauth2.client.user-authorization-uri=https://www.linkedin.com/uas/oauth2/authorization?response_type=code&client_id=81a0o1zczf4qb4
security.oauth2.client.access-token-uri=https://www.linkedin.com/uas/oauth2/accessToken
security.oauth2.client.token-name=access_token
security.oauth2.client.authenticationScheme=query
security.oauth2.client.clientAuthenticationScheme=form
security.oauth2.resource.user-info-uri=https://api.linkedin.com/v1/people/~:(id,num-connections,picture-url,email-address,first-name,last-name,location,summary,positions,specialties,public-profile-url)?format=json
security.oauth2.resource.user-professional-uri=https://api.linkedin.com/v1/people/~:(email-address,location,summary,positions)?format=json

# =================================
# =  AWS Credentials
# =================================
aws.s3.profilePicBucketName=ltoprofpictures
aws.s3.genericBucketName=ltobucket
aws.s3.opportunityImagesBucketName=ltoopporimages
lto.tmpFolder=tmp/s3/

multipart.maxFileSize = 3Mb
multipart.maxRequestSize = 20Mb


#SOLR config

solr.host.url=
solr.user.deltaImport.Url=http://ec2-54-187-229-255.us-west-2.compute.amazonaws.com:8983/solr/users/dataimport?wt=json&command=delta-import&verbose=true&clean=false&commit=true&optimize=false&core=users
solr.opportunity.deltaImport.Url=http://ec2-54-187-229-255.us-west-2.compute.amazonaws.com:8983/solr/opportunity/dataimport?wt=json&command=delta-import&verbose=false&clean=false&commit=true&optimize=false&core=opportunity
